package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GitHubReleasesMonitorSpec defines the desired state of GitHubReleasesMonitor
type GitHubReleasesMonitorSpec struct {
	URL         string `json:"url"`
	MonitorFrom string `json:"monitorFrom"`
	MonitorTo   string `json:"monitorTo"`
}

// GitHubReleasesMonitorStatus defines the observed state of GitHubReleasesMonitor
type GitHubReleasesMonitorStatus struct {
	Releases        []string    `json:"releases,omitempty"`
	LastChecked     metav1.Time `json:"lastChecked,omitempty"`
	MonitorFromTime metav1.Time `json:"monitorFromTime,omitempty"`
	MonitorToTime metav1.Time `json:"monitorToTime,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type GitHubReleasesMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GitHubReleasesMonitorSpec   `json:"spec,omitempty"`
	Status GitHubReleasesMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type GitHubReleasesMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitHubReleasesMonitor `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GitHubReleasesMonitor{}, &GitHubReleasesMonitorList{})
}
