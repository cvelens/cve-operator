package integration

import (
	"context"
	"time"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	cvev1 "cve-operator/api/v1"
)

var _ = Describe("GitHubReleasesMonitor controller", func() {
	Context("When creating a GitHubReleasesMonitor", func() {
		It("Should create and reconcile successfully", func() {
			monitor := &cvev1.GitHubReleasesMonitor{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "test-monitor",
					Namespace: "default",
				},
				Spec: cvev1.GitHubReleasesMonitorSpec{
					URL:         "https://api.github.com/repos/test/test/releases",
					MonitorFrom: "now",
					MonitorTo: "now",
				},
			}

			Expect(k8sClient.Create(context.Background(), monitor)).Should(Succeed())

			fetched := &cvev1.GitHubReleasesMonitor{}
			Eventually(func() bool {
				err := k8sClient.Get(context.Background(), client.ObjectKey{Name: "test-monitor", Namespace: "default"}, fetched)
				return err == nil && len(fetched.Status.Releases) > 0
			}, time.Second*10, time.Millisecond*250).Should(BeTrue())

			Expect(fetched.Status.LastChecked).NotTo(BeNil())
			Expect(fetched.Status.MonitorFromTime).NotTo(BeNil())
			Expect(fetched.Status.MonitorToTime).NotTo(BeNil())
		})
	})
})
