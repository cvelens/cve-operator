package integration

import (
	"context"
	"path/filepath"
	"testing"
	"time"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/envtest"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"

	cvev1 "github.com/cyse7125-su24-team15/cve-operator/api/v1"
)

var cfg *rest.Config
var k8sClient client.Client
var testEnv *envtest.Environment

func TestAPIs(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Controller Suite")
}

var _ = BeforeSuite(func() {
	logf.SetLogger(zap.New(zap.WriteTo(GinkgoWriter), zap.UseDevMode(true)))

	By("bootstrapping test environment")
	testEnv = &envtest.Environment{
		CRDDirectoryPaths:     []string{filepath.Join("..", "..", "config", "crd", "bases")},
		ErrorIfCRDPathMissing: true,
	}

	var err error
	cfg, err = testEnv.Start()
	Expect(err).NotTo(HaveOccurred())
	Expect(cfg).NotTo(BeNil())

	err = cvev1.AddToScheme(scheme.Scheme)
	Expect(err).NotTo(HaveOccurred())

	k8sClient, err = client.New(cfg, client.Options{Scheme: scheme.Scheme})
	Expect(err).NotTo(HaveOccurred())
	Expect(k8sClient).NotTo(BeNil())
})

var _ = AfterSuite(func() {
	By("tearing down the test environment")
	err := testEnv.Stop()
	Expect(err).NotTo(HaveOccurred())
})

var _ = Describe("GitHubReleasesMonitor controller", func() {
	Context("When creating a GitHubReleasesMonitor", func() {
		It("Should create and reconcile successfully", func() {
			monitor := &cvev1.GitHubReleasesMonitor{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "test-monitor",
					Namespace: "default",
				},
				Spec: cvev1.GitHubReleasesMonitorSpec{
					URL:         "https://api.github.com/repos/test/test/releases",
					MonitorFrom: "now",
				},
			}

			Expect(k8sClient.Create(context.Background(), monitor)).Should(Succeed())

			fetched := &cvev1.GitHubReleasesMonitor{}
			Eventually(func() bool {
				err := k8sClient.Get(context.Background(), client.ObjectKey{Name: "test-monitor", Namespace: "default"}, fetched)
				return err == nil && len(fetched.Status.Releases) > 0
			}, time.Second*10, time.Millisecond*250).Should(BeTrue())

			Expect(fetched.Status.LastChecked).NotTo(BeNil())
			Expect(fetched.Status.MonitorFromTime).NotTo(BeNil())
		})
	})
})
