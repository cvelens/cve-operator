# Use the official Golang image to create a build artifact.
FROM golang:alpine AS builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app for arm64 with verbose output
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -o processor ./cmd/processor/main.go

# Verify the processor binary is built correctly
RUN ls -l /app/processor

# Start a new stage from scratch
FROM alpine:latest

# Install ca-certificates
RUN apk --no-cache add ca-certificates

# Set the Current Working Directory inside the container
WORKDIR /root/

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/processor .

# Verify the processor binary is copied correctly
RUN ls -l /root/processor

# Command to run the executable
CMD ["./processor"]
