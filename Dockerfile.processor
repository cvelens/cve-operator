# Stage 1
FROM golang:alpine AS builder
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -o processor ./cmd/processor/main.go
RUN ls -l /app/processor

# Stage 2
FROM wurstmeister/kafka:latest AS kafka-tools

# Stage 3
FROM alpine:latest
RUN apk --no-cache add ca-certificates wget bash openjdk11-jre postgresql-client && \
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk && \
    apk add --force-overwrite glibc-2.34-r0.apk curl
COPY --from=kafka-tools /opt/kafka_2.13-2.8.1 /opt/kafka
COPY --from=builder /app/processor /usr/local/bin/processor

COPY readiness-check.sh /usr/local/bin/readiness-check.sh
COPY liveness-check.sh /usr/local/bin/liveness-check.sh

RUN apk add --no-cache dos2unix && \
    dos2unix /usr/local/bin/readiness-check.sh /usr/local/bin/liveness-check.sh && \
    chmod +x /usr/local/bin/processor /usr/local/bin/readiness-check.sh /usr/local/bin/liveness-check.sh

ENV KAFKA_HOME=/opt/kafka
ENV PATH=$KAFKA_HOME/bin:$PATH
ENTRYPOINT ["/bin/sh", "-c", "/usr/local/bin/processor \"$0\" \"$1\" && curl -X POST http://localhost:15000/quitquitquit"]

