package controllers

import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	cvev1 "github.com/cyse7125-su24-team15/cve-operator/api/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/google/go-github/v45/github"
	"golang.org/x/oauth2"
)

const githubReleasesMonitorFinalizer = "cve.my.domain/finalizer"

type GitHubRelease struct {
	TagName   string
	CreatedAt time.Time
}

type GitHubReleasesMonitorReconciler struct {
	client.Client
	Scheme             *runtime.Scheme
	checkNewReleasesFn func(string, time.Time) ([]GitHubRelease, error)
}

func (r *GitHubReleasesMonitorReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	var monitor cvev1.GitHubReleasesMonitor
	if err := r.Get(ctx, req.NamespacedName, &monitor); err != nil {
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Finalizer logic
	if monitor.ObjectMeta.DeletionTimestamp.IsZero() {
		if !containsString(monitor.ObjectMeta.Finalizers, githubReleasesMonitorFinalizer) {
			monitor.ObjectMeta.Finalizers = append(monitor.ObjectMeta.Finalizers, githubReleasesMonitorFinalizer)
			if err := r.Update(ctx, &monitor); err != nil {
				return ctrl.Result{}, err
			}
		}
	} else {
		if containsString(monitor.ObjectMeta.Finalizers, githubReleasesMonitorFinalizer) {
			if err := r.deleteExternalResources(ctx, &monitor); err != nil {
				return ctrl.Result{}, err
			}
			monitor.ObjectMeta.Finalizers = removeString(monitor.ObjectMeta.Finalizers, githubReleasesMonitorFinalizer)
			if err := r.Update(ctx, &monitor); err != nil {
				return ctrl.Result{}, err
			}
		}
		return ctrl.Result{}, nil
	}

	if err := r.recreateDeletedReleases(ctx, &monitor); err != nil {
		log.Error(err, "failed to recreate deleted releases")
		return ctrl.Result{}, err
	}

	// Initialize or update MonitorFromTime
	if monitor.Status.MonitorFromTime.IsZero() {
		if monitor.Spec.MonitorFrom == "now" {
			monitor.Status.MonitorFromTime = metav1.Now()
		} else {
			// Assuming MonitorFrom is a valid date string
			t, err := time.Parse(time.RFC3339, monitor.Spec.MonitorFrom)
			if err != nil {
				return ctrl.Result{}, err
			}
			monitor.Status.MonitorFromTime = metav1.NewTime(t)
		}
	}

	newReleases, err := r.checkNewReleases(monitor.Spec.URL, monitor.Status.MonitorFromTime.Time)
	if err != nil {
		log.Error(err, "failed to check for new releases")
		return ctrl.Result{}, err
	}

	for _, release := range newReleases {
		if !containsString(monitor.Status.Releases, release.TagName) {
			githubRelease := &cvev1.GitHubRelease{
				ObjectMeta: metav1.ObjectMeta{
					Name:      fmt.Sprintf("%s-%s", monitor.Name, release.TagName),
					Namespace: monitor.Namespace,
				},
				Spec: cvev1.GitHubReleaseSpec{
					URL:     monitor.Spec.URL,
					TagName: release.TagName,
				},
			}
			if err := r.Create(ctx, githubRelease); err != nil {
				log.Error(err, "failed to create GitHubRelease", "release", release.TagName)
				return ctrl.Result{}, err
			}
			monitor.Status.Releases = append(monitor.Status.Releases, release.TagName)
		}
	}

	// Update status
	monitor.Status.LastChecked = metav1.Now()
	if err := r.Status().Update(ctx, &monitor); err != nil {
		log.Error(err, "unable to update GitHubReleasesMonitor status")
		return ctrl.Result{}, err
	}

	return ctrl.Result{RequeueAfter: time.Minute * 5}, nil
}

func (r *GitHubReleasesMonitorReconciler) checkNewReleases(url string, since time.Time) ([]GitHubRelease, error) {
	ctx := context.Background()
	ts := oauth2.StaticTokenSource(
		&oauth2.Token{AccessToken: os.Getenv("GITHUB_TOKEN")},
	)
	tc := oauth2.NewClient(ctx, ts)
	client := github.NewClient(tc)

	// Parse the GitHub URL to get owner and repo
	parts := strings.Split(url, "/")
	owner := parts[len(parts)-2]
	repo := parts[len(parts)-1]

	opt := &github.ListOptions{PerPage: 100}
	var allReleases []GitHubRelease

	for {
		releases, resp, err := client.Repositories.ListReleases(ctx, owner, repo, opt)
		if err != nil {
			return nil, err
		}

		for _, release := range releases {
			if release.PublishedAt.After(since) {
				allReleases = append(allReleases, GitHubRelease{
					TagName:   *release.TagName,
					CreatedAt: release.PublishedAt.Time,
				})
			}
		}

		if resp.NextPage == 0 {
			break
		}
		opt.Page = resp.NextPage
	}

	return allReleases, nil
}

func (r *GitHubReleasesMonitorReconciler) deleteExternalResources(ctx context.Context, monitor *cvev1.GitHubReleasesMonitor) error {
	// Delete associated GitHubRelease CRs
	var releases cvev1.GitHubReleaseList
	if err := r.List(ctx, &releases, client.InNamespace(monitor.Namespace)); err != nil {
		return err
	}

	for _, release := range releases.Items {
		if err := r.Delete(ctx, &release); err != nil {
			return err
		}
	}

	return nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleasesMonitorReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&cvev1.GitHubReleasesMonitor{}).
		Complete(r)
}

func (r *GitHubReleasesMonitorReconciler) recreateDeletedReleases(ctx context.Context, monitor *cvev1.GitHubReleasesMonitor) error {
	for _, releaseName := range monitor.Status.Releases {
		var release cvev1.GitHubRelease
		err := r.Get(ctx, types.NamespacedName{Name: releaseName, Namespace: monitor.Namespace}, &release)
		if apierrors.IsNotFound(err) {
			newRelease := &cvev1.GitHubRelease{
				ObjectMeta: metav1.ObjectMeta{
					Name:      releaseName,
					Namespace: monitor.Namespace,
				},
				Spec: cvev1.GitHubReleaseSpec{
					URL:     monitor.Spec.URL,
					TagName: releaseName,
				},
			}
			if err := r.Create(ctx, newRelease); err != nil {
				return err
			}
		} else if err != nil {
			return err
		}
	}
	return nil
}
