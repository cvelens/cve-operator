package controllers

import (
	"context"
	"encoding/json"
	"fmt"

	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	cvev1 "cve-operator/api/v1"

	"github.com/IBM/sarama"
	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)

const githubReleaseFinalizer = "cve.my.domain/finalizer"
const maxRetries = 3

type GitHubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

func (r *GitHubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&cvev1.GitHubRelease{}).
		Complete(r)
}

func (r *GitHubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	var githubRelease cvev1.GitHubRelease
	if err := r.Get(ctx, req.NamespacedName, &githubRelease); err != nil {
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Finalizer logic
	if githubRelease.ObjectMeta.DeletionTimestamp.IsZero() {
		if !containsString(githubRelease.ObjectMeta.Finalizers, githubReleaseFinalizer) {
			githubRelease.ObjectMeta.Finalizers = append(githubRelease.ObjectMeta.Finalizers, githubReleaseFinalizer)
			if err := r.Update(ctx, &githubRelease); err != nil {
				return ctrl.Result{}, err
			}
		}
	} else {
		if containsString(githubRelease.ObjectMeta.Finalizers, githubReleaseFinalizer) {
			if err := r.deleteExternalResources(ctx, &githubRelease); err != nil {
				log.Error(err, "Failed to delete external resources")
				return ctrl.Result{}, err
			}
			githubRelease.ObjectMeta.Finalizers = removeString(githubRelease.ObjectMeta.Finalizers, githubReleaseFinalizer)
			if err := r.Update(ctx, &githubRelease); err != nil {
				return ctrl.Result{}, err
			}
		}
		return ctrl.Result{}, nil
	}

	// Ensure Job is created
	job, err := r.createOrGetJob(ctx, &githubRelease)
	if err != nil {
		log.Error(err, "Unable to create or get Job for GitHubRelease")
		return ctrl.Result{}, err
	}

	// Update GitHubRelease status based on Job status
	if job.Status.Succeeded > 0 {
		githubRelease.Status.Processed = true
		githubRelease.Status.ProcessedAt = metav1.Now()
		githubRelease.Status.JobStatus = "Succeeded"
	} else if job.Status.Failed > 0 {
		if githubRelease.Status.RetryCount < maxRetries {
			githubRelease.Status.RetryCount++
			githubRelease.Status.JobStatus = "Retrying"
			if err := r.Delete(ctx, job); err != nil {
				log.Error(err, "Unable to delete failed Job")
				return ctrl.Result{}, err
			}
			return ctrl.Result{Requeue: true}, nil
		} else {
			githubRelease.Status.JobStatus = "Failed"
		}
	} else {
		githubRelease.Status.JobStatus = "Running"
	}

	if err := r.Status().Update(ctx, &githubRelease); err != nil {
		log.Error(err, "Unable to update GitHubRelease status")
		return ctrl.Result{}, err
	}

	// Serialize GitHubRelease to JSON
	data, err := json.Marshal(githubRelease)
	if err != nil {
		log.Error(err, "Unable to marshal GitHubRelease to JSON")
		return ctrl.Result{}, err
	}

	// Send data to Kafka
	if err := r.sendToKafka(data); err != nil {
		log.Error(err, "Unable to send data to Kafka")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

func (r *GitHubReleaseReconciler) createOrGetJob(ctx context.Context, githubRelease *cvev1.GitHubRelease) (*batchv1.Job, error) {
	jobName := fmt.Sprintf("%s-processor", githubRelease.Name)
	job := &batchv1.Job{}
	err := r.Get(ctx, types.NamespacedName{Name: jobName, Namespace: githubRelease.Namespace}, job)

	if err != nil && !apierrors.IsNotFound(err) {
		return nil, err
	}

	if apierrors.IsNotFound(err) {
		job = &batchv1.Job{
			ObjectMeta: metav1.ObjectMeta{
				Name:      jobName,
				Namespace: githubRelease.Namespace,
				OwnerReferences: []metav1.OwnerReference{
					*metav1.NewControllerRef(githubRelease, cvev1.GroupVersion.WithKind("GitHubRelease")),
				},
			},
			Spec: batchv1.JobSpec{
				Template: corev1.PodTemplateSpec{
					Spec: corev1.PodSpec{
						RestartPolicy: corev1.RestartPolicyOnFailure,
						Affinity: &corev1.Affinity{
							PodAntiAffinity: &corev1.PodAntiAffinity{
								PreferredDuringSchedulingIgnoredDuringExecution: []corev1.WeightedPodAffinityTerm{
									{
										Weight: 100,
										PodAffinityTerm: corev1.PodAffinityTerm{
											LabelSelector: &metav1.LabelSelector{
												MatchExpressions: []metav1.LabelSelectorRequirement{
													{
														Key:      "job-name",
														Operator: metav1.LabelSelectorOpExists,
													},
												},
											},
											TopologyKey: "topology.kubernetes.io/zone",
										},
									},
								},
							},
						},
						Containers: []corev1.Container{
							{
								Name:            "processor",
								Image:           "chlokesh1306/cve-processor-new:latest",
								ImagePullPolicy: corev1.PullAlways,
								Args: []string{
									githubRelease.Spec.DeltaZipURL,
									githubRelease.Spec.TagName,
								},
								Env: []corev1.EnvVar{
									{
										Name:  "KAFKA_BROKERS",
										Value: "kafka-broker-headless.ns2.svc.cluster.local:9092", // match Kafka broker address
									},
									{
										Name:  "KAFKA_TOPIC",
										Value: "cve",
									},
								},
								Resources: corev1.ResourceRequirements{
									Limits: corev1.ResourceList{
										corev1.ResourceCPU:    resource.MustParse("1"),
										corev1.ResourceMemory: resource.MustParse("1Gi"),
									},
									Requests: corev1.ResourceList{
										corev1.ResourceCPU:    resource.MustParse("0.5"),
										corev1.ResourceMemory: resource.MustParse("512Mi"),
									},
								},
							},
						},
					},
				},
			},
		}
		if err := r.Create(ctx, job); err != nil {
			return nil, err
		}
	}

	return job, nil
}

func (r *GitHubReleaseReconciler) deleteExternalResources(ctx context.Context, githubRelease *cvev1.GitHubRelease) error {
	if githubRelease.Status.JobName != "" {
		job := &batchv1.Job{
			ObjectMeta: metav1.ObjectMeta{
				Name:      githubRelease.Status.JobName,
				Namespace: githubRelease.Namespace,
			},
		}
		err := r.Delete(ctx, job)
		if err != nil && !apierrors.IsNotFound(err) {
			return err
		}
	}
	return nil
}

func (r *GitHubReleaseReconciler) sendToKafka(data []byte) error {
	config := sarama.NewConfig()
	config.Producer.Return.Successes = true

	producer, err := sarama.NewSyncProducer([]string{"kafka-broker-headless.ns2.svc.cluster.local:9092"}, config)
	if err != nil {
		return err
	}
	defer producer.Close()

	msg := &sarama.ProducerMessage{
		Topic: "cve",
		Value: sarama.ByteEncoder(data),
	}

	_, _, err = producer.SendMessage(msg)
	return err
}
