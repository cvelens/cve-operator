package controllers

import (
	"context"
	"fmt"

	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	cvev1 "github.com/cyse7125-su24-team15/cve-operator/api/v1"
	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)

const githubReleaseFinalizer = "cve.my.domain/finalizer"
const maxRetries = 3

type GitHubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

func (r *GitHubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	var githubRelease cvev1.GitHubRelease
	if err := r.Get(ctx, req.NamespacedName, &githubRelease); err != nil {
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Finalizer logic
	if githubRelease.ObjectMeta.DeletionTimestamp.IsZero() {
		if !containsString(githubRelease.ObjectMeta.Finalizers, githubReleaseFinalizer) {
			githubRelease.ObjectMeta.Finalizers = append(githubRelease.ObjectMeta.Finalizers, githubReleaseFinalizer)
			if err := r.Update(ctx, &githubRelease); err != nil {
				return ctrl.Result{}, err
			}
		}
	} else {
		if containsString(githubRelease.ObjectMeta.Finalizers, githubReleaseFinalizer) {
			if err := r.deleteExternalResources(ctx, &githubRelease); err != nil {
				return ctrl.Result{}, err
			}
			githubRelease.ObjectMeta.Finalizers = removeString(githubRelease.ObjectMeta.Finalizers, githubReleaseFinalizer)
			if err := r.Update(ctx, &githubRelease); err != nil {
				return ctrl.Result{}, err
			}
		}
		return ctrl.Result{}, nil
	}

	if !githubRelease.Status.Processed {
		job, err := r.createOrGetJob(ctx, &githubRelease)
		if err != nil {
			log.Error(err, "unable to create or get Job for GitHubRelease")
			return ctrl.Result{}, err
		}

		if job.Status.Succeeded > 0 {
			githubRelease.Status.Processed = true
			githubRelease.Status.ProcessedAt = metav1.Now()
			githubRelease.Status.JobStatus = "Succeeded"
		} else if job.Status.Failed > 0 {
			if githubRelease.Status.RetryCount < maxRetries {
				githubRelease.Status.RetryCount++
				githubRelease.Status.JobStatus = "Retrying"
				if err := r.Delete(ctx, job); err != nil {
					log.Error(err, "unable to delete failed Job")
					return ctrl.Result{}, err
				}
			} else {
				githubRelease.Status.JobStatus = "Failed"
			}
		} else {
			githubRelease.Status.JobStatus = "Running"
		}

		if err := r.Status().Update(ctx, &githubRelease); err != nil {
			log.Error(err, "unable to update GitHubRelease status")
			return ctrl.Result{}, err
		}
	}

	return ctrl.Result{}, nil
}

func (r *GitHubReleaseReconciler) createOrGetJob(ctx context.Context, githubRelease *cvev1.GitHubRelease) (*batchv1.Job, error) {
	jobName := fmt.Sprintf("%s-processor", githubRelease.Name)
	job := &batchv1.Job{}
	err := r.Get(ctx, types.NamespacedName{Name: jobName, Namespace: githubRelease.Namespace}, job)

	if err != nil && !apierrors.IsNotFound(err) {
		return nil, err
	}

	if apierrors.IsNotFound(err) {
		job = &batchv1.Job{
			ObjectMeta: metav1.ObjectMeta{
				Name:      jobName,
				Namespace: githubRelease.Namespace,
			},
			Spec: batchv1.JobSpec{
				Template: corev1.PodTemplateSpec{
					Spec: corev1.PodSpec{
						RestartPolicy: corev1.RestartPolicyOnFailure,
						Containers: []corev1.Container{
							{
								Name:  "processor",
								Image: "your-registry/cve-processor:latest",
								Args:  []string{githubRelease.Spec.URL, githubRelease.Spec.TagName},
							},
						},
					},
				},
			},
		}
		if err := r.Create(ctx, job); err != nil {
			return nil, err
		}
	}

	return job, nil
}

func (r *GitHubReleaseReconciler) deleteExternalResources(ctx context.Context, githubRelease *cvev1.GitHubRelease) error {
	jobName := fmt.Sprintf("%s-processor", githubRelease.Name)
	job := &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      jobName,
			Namespace: githubRelease.Namespace,
		},
	}
	err := r.Delete(ctx, job)
	if err != nil && !apierrors.IsNotFound(err) {
		return err
	}
	return nil
}

func (r *GitHubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&cvev1.GitHubRelease{}).
		Complete(r)
}
