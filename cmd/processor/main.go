package main

import (
	"archive/zip"
	"bytes"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"

	_ "github.com/lib/pq"
)

type CVERecord struct {
	Containers struct {
		CNA struct {
			Affected []struct {
				Product  string `json:"product"`
				Vendor   string `json:"vendor"`
				Versions []struct {
					Status  string `json:"status"`
					Version string `json:"version"`
				} `json:"versions"`
			} `json:"affected"`
			Descriptions []struct {
				Lang  string `json:"lang"`
				Value string `json:"value"`
			} `json:"descriptions"`
			ProblemTypes []struct {
				Descriptions []struct {
					Description string `json:"description"`
					Lang        string `json:"lang"`
					Type        string `json:"type"`
				} `json:"descriptions"`
			} `json:"problemTypes"`
			ProviderMetadata struct {
				DateUpdated string `json:"dateUpdated"`
				OrgID       string `json:"orgId"`
				ShortName   string `json:"shortName"`
			} `json:"providerMetadata"`
			References []struct {
				Name string   `json:"name"`
				Tags []string `json:"tags"`
				URL  string   `json:"url"`
			} `json:"references"`
			XLegacyV4Record struct {
				CVEDataMeta struct {
					Assigner string `json:"ASSIGNER"`
					ID       string `json:"ID"`
					State    string `json:"STATE"`
				} `json:"CVE_data_meta"`
				Affects struct {
					Vendor struct {
						VendorData []struct {
							Product struct {
								ProductData []struct {
									ProductName string `json:"product_name"`
									Version     struct {
										VersionData []struct {
											VersionValue string `json:"version_value"`
										} `json:"version_data"`
									} `json:"version"`
								} `json:"product_data"`
							} `json:"product"`
							VendorName string `json:"vendor_name"`
						} `json:"vendor_data"`
					} `json:"vendor"`
				} `json:"affects"`
				DataFormat  string `json:"data_format"`
				DataType    string `json:"data_type"`
				DataVersion string `json:"data_version"`
				Description struct {
					DescriptionData []struct {
						Lang  string `json:"lang"`
						Value string `json:"value"`
					} `json:"description_data"`
				} `json:"description"`
				ProblemType struct {
					ProblemTypeData []struct {
						Description []struct {
							Lang  string `json:"lang"`
							Value string `json:"value"`
						} `json:"description"`
					} `json:"problemtype_data"`
				} `json:"problemtype"`
				References struct {
					ReferenceData []struct {
						Name      string `json:"name"`
						Refsource string `json:"refsource"`
						URL       string `json:"url"`
					} `json:"reference_data"`
				} `json:"references"`
			} `json:"x_legacyV4Record"`
		} `json:"cna"`
	} `json:"containers"`
	CveMetadata struct {
		AssignerOrgID     string `json:"assignerOrgId"`
		AssignerShortName string `json:"assignerShortName"`
		CveID             string `json:"cveId"`
		DatePublished     string `json:"datePublished"`
		DateReserved      string `json:"dateReserved"`
		DateUpdated       string `json:"dateUpdated"`
		State             string `json:"state"`
	} `json:"cveMetadata"`
	DataType    string `json:"dataType"`
	DataVersion string `json:"dataVersion"`
}

func main() {
	if len(os.Args) != 3 {
		fmt.Println("Usage: processor <delta_zip_url> <tag_name>")
		os.Exit(1)
	}

	deltaZipURL := os.Args[1]
	tagName := os.Args[2]

	// Database configuration
	dbInfo := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		os.Getenv("DB_HOST"), os.Getenv("DB_PORT"), os.Getenv("DB_USER"), os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_NAME"))

	db, err := sql.Open("postgres", dbInfo)
	if err != nil {
		log.Fatalf("Error opening database: %v", err)
	}
	defer db.Close()

	err = db.Ping()
	if err != nil {
		log.Fatalf("Error pinging database: %v", err)
	}
	log.Println("Successfully connected to the database")

	// Download and process the delta zip file
	err = downloadAndProcessDeltaZip(deltaZipURL, tagName, db)
	if err != nil {
		log.Fatalf("Error processing delta zip: %v", err)
	}

	log.Printf("Successfully processed delta zip for %s\n", tagName)
}

func downloadAndProcessDeltaZip(url, _ string, db *sql.DB) error {
	resp, err := http.Get(url)
	if err != nil {
		return fmt.Errorf("error downloading delta zip: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("error reading response body: %v", err)
	}

	zipReader, err := zip.NewReader(bytes.NewReader(body), int64(len(body)))
	if err != nil {
		return fmt.Errorf("error creating zip reader: %v", err)
	}

	for _, zipFile := range zipReader.File {
		if strings.HasSuffix(zipFile.Name, ".json") {
			err := processJSONFile(zipFile, db)
			if err != nil {
				return fmt.Errorf("error processing JSON file %s: %v", zipFile.Name, err)
			}
		}
	}

	return nil
}

func processJSONFile(zipFile *zip.File, db *sql.DB) error {
	fileReader, err := zipFile.Open()
	if err != nil {
		return err
	}
	defer fileReader.Close()

	var cveRecord CVERecord
	decoder := json.NewDecoder(fileReader)
	if err := decoder.Decode(&cveRecord); err != nil {
		return err
	}

	// Process and store the CVE record
	return storeCVERecord(db, &cveRecord)
}

func storeCVERecord(db *sql.DB, cveRecord *CVERecord) error {
	// Check if the CVE record already exists
	var existingVersion int
	var count int

	err := db.QueryRow("SELECT COUNT(*) FROM cve.cve WHERE id = $1", cveRecord.CveMetadata.CveID).Scan(&count)
	if err != nil && err != sql.ErrNoRows {
		return fmt.Errorf("error checking existing CVE record: %v", err)
	}

	if count > 0 {
		err = db.QueryRow("SELECT MAX(version) FROM cve.cve WHERE id = $1", cveRecord.CveMetadata.CveID).Scan(&existingVersion)
		if err != nil {
			return fmt.Errorf("error retrieving existing version for CVE record %s: %v", cveRecord.CveMetadata.CveID, err)
		}
	}

	newVersion := existingVersion + 1

	// Convert the entire CVE record to JSON for storage
	data, err := json.Marshal(cveRecord)
	if err != nil {
		return fmt.Errorf("error marshaling CVE record to JSON: %v", err)
	}

	// Insert or update the CVE record
	_, err = db.Exec(`
        INSERT INTO cve.cve (id, version, assigner_org_id, assigner_short_name, date_published, date_reserved, date_updated, state, data)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        ON CONFLICT (id, version) DO UPDATE SET
            assigner_org_id = EXCLUDED.assigner_org_id,
            assigner_short_name = EXCLUDED.assigner_short_name,
            date_published = EXCLUDED.date_published,
            date_reserved = EXCLUDED.date_reserved,
            date_updated = EXCLUDED.date_updated,
            state = EXCLUDED.state,
            data = EXCLUDED.data
    `, cveRecord.CveMetadata.CveID, newVersion, cveRecord.CveMetadata.AssignerOrgID, cveRecord.CveMetadata.AssignerShortName,
		cveRecord.CveMetadata.DatePublished, cveRecord.CveMetadata.DateReserved, cveRecord.CveMetadata.DateUpdated,
		cveRecord.CveMetadata.State, data)

	if err != nil {
		return fmt.Errorf("error inserting/updating CVE record %s (version %d): %v", cveRecord.CveMetadata.CveID, newVersion, err)
	}

	return nil
}
