package main

import (
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	if len(os.Args) != 3 {
		fmt.Println("Usage: processor <release_url> <tag_name>")
		os.Exit(1)
	}

	releaseURL := os.Args[1]
	tagName := os.Args[2]

	// Download the release assets
	resp, err := http.Get(releaseURL)
	if err != nil {
		fmt.Printf("Error downloading release: %v\n", err)
		os.Exit(1)
	}
	defer resp.Body.Close()

	// Find the delta zip file
	var deltaZipURL string
	for _, asset := range resp.Header["Link"] {
		if strings.Contains(asset, "delta") && strings.HasSuffix(asset, ".zip") {
			deltaZipURL = asset
			break
		}
	}

	if deltaZipURL == "" {
		fmt.Println("Delta zip file not found")
		os.Exit(1)
	}

	// Download the delta zip file
	resp, err = http.Get(deltaZipURL)
	if err != nil {
		fmt.Printf("Error downloading delta zip: %v\n", err)
		os.Exit(1)
	}
	defer resp.Body.Close()

	// Create the output file
	outFile, err := os.Create(filepath.Join("/tmp", fmt.Sprintf("%s-delta.zip", tagName)))
	if err != nil {
		fmt.Printf("Error creating output file: %v\n", err)
		os.Exit(1)
	}
	defer outFile.Close()

	// Copy the content
	_, err = io.Copy(outFile, resp.Body)
	if err != nil {
		fmt.Printf("Error saving delta zip: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Successfully downloaded and saved delta zip for %s\n", tagName)
}
